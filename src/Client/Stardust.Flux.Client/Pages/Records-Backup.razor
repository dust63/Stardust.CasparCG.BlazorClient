@page "/records"
@inject IStringLocalizer<App> local

@inject IRecordModelService RecordModelService
@inject ModalService ModalService
@inject MessageService _message


<PageContainer>

    <Content>
        <h3>@local["Records"]</h3>
        <p>@local["RecordsSubtitle"]</p>
    </Content>
    <ChildContent>

        <Card Class="CARD">
            <Calendar validRange="@ValidRange" DisabledDate="DisableDateFilter" @ref="CalendarRef" DateCellRender="DateCellRender" OnSelect="OnCalendarSelect" HeaderRender="HeaderRender" />



        </Card>
    </ChildContent>

</PageContainer>



<style>
    .scrollable-container {
        height: 80%;
        overflow-y: scroll;
    }
</style>

@code{



    DateTime[] ValidRange = new[] { DateTime.Now.AddMonths(-1), DateTime.Now.AddYears(1) };

    IList<ScheduledRecord> ScheduledRecords = new List<ScheduledRecord>();


    Calendar CalendarRef { get; set; }

    private ModalRef _modalRef;

    private DateTime selectedValue = DateTime.Now;


    protected override async Task OnInitializedAsync()
    {

        await LoadRecords();
    }

    private bool DisableDateFilter(DateTime date)
    {
        return date < DateTime.Now.Date;
    }


    private void OnCalendarSelect(DateTime date)
    {
        selectedValue = date;
    }

    private RenderFragment DateCellRender(DateTime value)
    {
        return@<Template>
        <ul class="events">

            @foreach (var data in ScheduledRecords.Where(x => x.StartTime.Date == value.Date))
            {

                <li key="@data.Title">
                    <a @onclick="()=> ScheduleItemClick(data)">
                        <Badge Color="@SwitchBadgeColor(data)" Text="@data.Title" />
                    </a>

                </li>

            }
        </ul>
    </Template>;
    }



         private string SwitchBadgeColor(ScheduledRecord record)
         {
             switch (record.Mode)
             {

                 case ScheduledRecord.ProgramMode.Daily:
                     return "lime";
                 case ScheduledRecord.ProgramMode.Weekly:
                     return "pink";
                 default:
                     return "blue";


             }
         }

         private async Task LoadRecords()
         {
             ScheduledRecords = await RecordModelService.GetAllScheduledRecords(DateTime.Now, TimeSpan.FromDays(31), TimeSpan.FromDays(365));
             var datesToRefresh = ScheduledRecords.GroupBy(x => x.StartTime.Date);


         }

         private async void OnRecordNow()
         {           
             var modalConfig = new ModalOptions();
             modalConfig.Title = local["AddANewRecord"].Value;
             modalConfig.CancelText =  local["Cancel"].Value;
             modalConfig.OkText =  local["Ok"].Value;

             var record = new ManualRecord();
             _modalRef = await ModalService
             .CreateModalAsync<RecordNowForm, ManualRecord>
             (modalConfig, record);


             _modalRef.OnOk = () =>
             {

                 ScheduledRecords.Add(new ScheduledRecord
                 {
                     StartTime = DateTime.Now,
                     EndTime = DateTime.Now.Add(new TimeSpan(record.Duration.Value.Hour, record.Duration.Value.Minute, record.Duration.Value.Second)),
                     Title = record.Title,
                     Description = record.Description,
                     Filename = record.Filename ?? $"MyRecord-{DateTime.Now.ToString("yyyy-MM-dd")}"
                 });
                 _message.Success(local["RecordAddedMessage"].Value);
                 return Task.CompletedTask;

             };

             _modalRef.OnCancel = () =>
             {
                 Console.WriteLine("Canceled");
                 return Task.CompletedTask;

             };

         }

         private async void OnAddRecord()
         {
           await  ScheduleItemClick(new ScheduledRecord { StartTime = DateTime.Now.AddMinutes(5), DayOfWeek = DateTime.Now.DayOfWeek });
         }




         private ScheduledRecord _editRecord;
         private ScheduledRecord _editRecordCloned;
         private async Task ScheduleItemClick(ScheduledRecord record)
         {
             _editRecord = record;
             _editRecordCloned = record.Clone();
             var modalConfig = new ModalOptions();
             modalConfig.Title = record.Id == null ?local["AddANewRecord"] :local["EditYourRecord"];
             modalConfig.CancelText =local["Cancel"].Value;
             modalConfig.OkText =local["Ok"].Value;

             _modalRef = await ModalService
             .CreateModalAsync<RecordDetails, ScheduledRecord>
             (modalConfig, _editRecordCloned);


             _modalRef.OnOk = () =>
             {
                 Console.WriteLine("Ok");
                 if (record.Id == null)
                 {
                     ScheduledRecords.Add(record);
                     _message.Success(local["RecordAddedMessage"].Value);
                 }

                 else
                 {
                     _editRecord.StartTime = _editRecordCloned.StartTime;
                     _editRecord.EndTime = _editRecordCloned.EndTime;
                     _editRecord.Mode = _editRecordCloned.Mode;
                     _editRecord.DayOfWeek = _editRecordCloned.DayOfWeek;
                     _editRecord.Description = _editRecordCloned.Description;
                     _editRecord.Filename = _editRecordCloned.Filename;
                     _editRecord.IsPrivate = _editRecordCloned.IsPrivate;
                     _editRecord.Title = _editRecordCloned.Title;
                     _editRecord.YoutubeTags = _editRecordCloned.YoutubeTags.ToList();
                     _editRecord.Logo = _editRecordCloned.Logo;
                     _editRecord.OpenCreditMovie = _editRecordCloned.OpenCreditMovie;
                     _editRecord.EndCreditMovie = _editRecordCloned.EndCreditMovie;
                 }

                 return Task.CompletedTask;

             };

             _modalRef.OnCancel = () =>
             {
                 Console.WriteLine("Canceled");
                 return Task.CompletedTask;

             };


         }

         private RenderFragment HeaderRender(CalendarHeaderRenderArgs args)
         {
             return
        @<Template>
            <div>
                <Row>
                    <div class="ant-col ant-col-8 ant-picker-calendar-header" style="justify-content: flex-start;">
                        <Space Size=@("small") Align="center">
                            <SpaceItem>
                                <Tooltip Title="@local["RecordNowTooltip"].Value">
                                    <Button OnClick="OnRecordNow" Icon="play-circle" Type="primary" Ghost="true">
                                        @local["Record"]
                                    </Button>
                                </Tooltip>
                            </SpaceItem>
                            <SpaceItem>
                                <Tooltip Title="@local["ScheduleRecordTooltip"].Value">
                                    <Button OnClick="OnAddRecord" Icon="plus">
                                        @local["Add"]
                                    </Button>
                                </Tooltip>
                            </SpaceItem>
                            <SpaceItem>
                                <Tooltip Title="@local["Load"].Value">
                                    <Button OnClick="LoadRecords" Icon="refresh">
                                        @local["Load"]
                                    </Button>
                                </Tooltip>
                            </SpaceItem>
                        </Space>
                    </div>
                    <div class="ant-col ant-col-8 ant-picker-calendar-header" style="justify-content: center;">
                        <Space Size=@("middle") Align="center">
                            <SpaceItem>
                                <Badge Color="pink" Text="Weekly">

                                </Badge>
                            </SpaceItem>
                            <SpaceItem>
                                <Badge Color="lime" Text="Daily">

                                </Badge>
                            </SpaceItem>
                            <SpaceItem>
                                <Badge Color="blue" Text="Normal">

                                </Badge>
                            </SpaceItem>
                        </Space>
                    </div>
                    <div class="ant-col ant-col-8">

                        <CascadingValue Value="@CalendarRef" Name="Calendar">
                            <CascadingValue Value="@CalendarRef.PrefixCls" Name="PrefixCls">
                                <CalendarHeader />
                            </CascadingValue>
                        </CascadingValue>

                    </div>
                </Row>
            </div>
        </Template>;

}

}
