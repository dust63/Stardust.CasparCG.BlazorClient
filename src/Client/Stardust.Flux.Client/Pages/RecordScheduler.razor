
@page "/recordScheduler"
@using Stardust.Flux.ClientServices;
@using Stardust.Flux.Contract.DTO.Schedule;
@inject IRecordModelService RecordService;



<div class="container-fluid">
    <div class="row">
        <div class="col-xl-2" style="margin: 1em 0">
            <RadzenButton Click="@GetAllRecord" Text="Test" ButtonStyle="ButtonStyle.Light"></RadzenButton>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <RadzenScheduler TItem="ScheduledRecord" StartProperty="Start" EndProperty="End" Data=@Records TextProperty="Name" style="height: 95vh">
                <Template Context="data">
                    @if (data.IsRecuring)
                    {
                        <RadzenIcon Icon="all_inclusive"></RadzenIcon>
                        <strong>@data.Name</strong>

                    }
                    else
                    {
                        @data.Name
                    }
                </Template>
                <ChildContent>
                    <RadzenDayView StartTime="@StartDay" EndTime="@EndDay" />
                    <RadzenWeekView StartTime="@StartDay" EndTime="@EndDay" />
                    <RadzenMonthView />
                </ChildContent>
            </RadzenScheduler>
        </div>
    </div>
</div>


@code {



    public TimeSpan StartDay => new TimeSpan(0, 0, 0, 0);

    public TimeSpan EndDay => new TimeSpan(0, 23, 59, 59);


    public async Task GetAllRecord()
    {
        Records = await RecordService.GetAllScheduledRecords();
    }


    protected override async Task OnInitializedAsync()
    {
        await GetAllRecord();
    }


    IList<ScheduledRecord> Records = new List<ScheduledRecord>();

}
