@page "/records"
@using Syncfusion.Blazor.Schedule
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using System.ComponentModel.DataAnnotations
@using Syncfusion.Blazor.Navigations; 
@inject IStringLocalizer<Localization> localizer
@inject IRecordModelService RecordModelService

<h1>List of you scheduled records</h1>

<div class="overview-toolbar">
    <div style="height: 70px;width: calc(100% - 90px);">
        <SfToolbar Width="auto" Height="70px" OverflowMode="OverflowMode.Scrollable" ScrollStep="100">
            <ToolbarItems>
                <ToolbarItem PrefixIcon="e-icons e-schedule-add-event" TooltipText="New Event" Text="New Event" OnClick="OnNewEventAdd"></ToolbarItem>
                <ToolbarItem PrefixIcon="e-icons e-schedule-add-recurrence-event" TooltipText="New Recurring Event" Text="New Recurring Event" OnClick="OnNewRecurringEventAdd"></ToolbarItem>
                <ToolbarItem Type="@ItemType.Separator"></ToolbarItem>
                <ToolbarItem PrefixIcon="e-icons e-schedule-day-view" TooltipText="Day" Text="Day" OnClick="OnDayView"></ToolbarItem>
                <ToolbarItem PrefixIcon="e-icons e-schedule-week-view" TooltipText="Week" Text="Week" OnClick="OnWeekView"></ToolbarItem>             
                <ToolbarItem PrefixIcon="e-icons e-schedule-month-view" TooltipText="Month" Text="Month" OnClick="OnMonthView"></ToolbarItem>              
           
                <ToolbarItem TooltipText="Timeline Views">
                    <Template>
                        <div style="height: 46px; line-height: 23px;">
                            <div class="icon-child" style="text-align: center;">
                                <SfSwitch @ref="ViewRef" TChecked="bool" ValueChange="OnViewChange"></SfSwitch>
                            </div>
                            <div class="text-child" style="font-size: 14px;">Timeline Views</div>
                        </div>
                    </Template>
                </ToolbarItem>
                <ToolbarItem Type="@ItemType.Separator"></ToolbarItem>              
                <ToolbarItem TooltipText="Gridlines" Disabled="@(CurrentView == (View.Agenda | View.Month | View.Year | View.TimelineMonth | View.TimelineYear))">
                    <Template>
                        <div style="height: 46px; line-height: 23px;">
                            <div class="icon-child" style="text-align: center;">
                                <SfSwitch TChecked="bool" Checked="@EnableTimeScale" ValueChange="OnTimeScaleChange"></SfSwitch>
                            </div>
                            <div class="text-child" style="font-size: 14px;">Gridlines</div>
                        </div>
                    </Template>
                </ToolbarItem>     
              
            </ToolbarItems>   
        </SfToolbar>
    </div>   
</div>



<button class="btn btn-primary" @onclick="GetAllRecord">Load</button>
<button class="btn btn-primary" @onclick="Scroll">Go to now</button>
<SfDatePicker TValue="DateTime" Width="100px" @bind-Value="CurrentDate">
    <DatePickerEvents TValue="DateTime" ValueChange="ValueChangeHandler"></DatePickerEvents>
</SfDatePicker>


<SfSlider @bind-Value="@SlotCount" Max="6" Min="1" Step="1" Width="80px"></SfSlider>

<SfSchedule TValue="ScheduledRecord" Height="685px" @bind-SelectedDate="@CurrentDate" @ref="ScheduleObj" CurrentView="@CurrentView" AllowInline="false">
   <ScheduleTimeScale Enable="@EnableTimeScale" Interval="@SlotInterval" SlotCount="@SlotCount"></ScheduleTimeScale>*@
    <ScheduleEvents TValue="ScheduledRecord"></ScheduleEvents>
    <ScheduleEventSettings DataSource="@RecordsData"></ScheduleEventSettings>
    <ScheduleViews>
        <ScheduleView Option="View.TimelineDay" />
        <ScheduleView Option="View.TimelineWeek" />
        <ScheduleView Option="View.Day" />
        <ScheduleView Option="View.Week" />
        <ScheduleView Option="View.Month" />
    </ScheduleViews>
    <ScheduleTemplates>
        <EditorTemplate>
            <div class="custom-event-editor" width="100%">


                <div class="form-row">
                    <div class="form-group col-md-12">
                        <label class="col-form-label">@localizer["Title"]</label>
                        <SfTextBox @bind-Value="@((context as ScheduledRecord).Title)"></SfTextBox>
                        <ValidationMessage For="() => ((context as ScheduledRecord).Title)" />
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6">
                        <label class="col-form-label">@localizer["StartTime"]</label>
                        <SfDateTimePicker @bind-Value="@((context as ScheduledRecord).StartTime)"></SfDateTimePicker>
                        <ValidationMessage For="() => ((context as ScheduledRecord).StartTime)" />
                    </div>
                    <div class="form-group col-md-6">
                        <label class="col-form-label">@localizer["EndTime"]</label>
                        <SfDateTimePicker @bind-Value="@((context as ScheduledRecord).EndTime)"></SfDateTimePicker>
                        <ValidationMessage For="() => ((context as ScheduledRecord).EndTime)" />
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-12">
                        <label class="col-form-label">@localizer["Description"]</label>
                        <SfTextBox Multiline="true" @bind-Value="@((context as ScheduledRecord).Description)"></SfTextBox>
                        <ValidationMessage For="() => ((context as ScheduledRecord).Description)" />
                    </div>

                </div>
                <div class="form-row">
                    <div class="form-group col-md-12">
                        <label class="col-form-label">@localizer["Tags"]</label>
                        <div class="form-inline">
                            <SfTextBox @bind-Value="@(TagToAdd)" />
                            <SfButton Type="button" IsPrimary="true" OnClick="@AddTag">Add</SfButton>
                        </div>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group col-md-12">
                        <SfChip EnableDelete="true">
                            <ChipItems>
                                @foreach (var tag in ScheduledRecordValidation.YoutubeTags)
                                {
                                    <ChipItem Text="@tag"></ChipItem>
                                }
                            </ChipItems>
                        </SfChip>
                    </div>
                </div>

            </div>
        </EditorTemplate>
    </ScheduleTemplates>
</SfSchedule>



@code {
    bool EnableTimeScale = false;
    SfSwitch<bool> ViewRef;
    int SlotInterval = 60;
    int SlotCount = 6;
    string TagToAdd = null;
    View CurrentView = View.TimelineWeek;
    SfSchedule<ScheduledRecord> ScheduleObj;
    EditForm SchedulerEditForm;
    private bool DialogVisibility = false;
    private string Action;
    public ScheduledRecord ScheduledRecordValidation = new ScheduledRecord();
    string ActualHour => DateTime.Now.Hour.ToString();

    int TimeSlot = 2;

    public DateTime CurrentDate { get; set; } = DateTime.Now;


    IList<ScheduledRecord> RecordsData = new List<ScheduledRecord>();

    private async Task Scroll()
    {

        await ScheduleObj.ScrollTo(DateTime.Now.ToString("HH:mm"));
    }


    public async void ValueChangeHandler(ChangedEventArgs<DateTime> args)
    {
        CurrentDate = args.Value;
        await Scroll();
    }


    private async Task GetAllRecord()
    {
        var records = await RecordModelService.GetAllScheduledRecords(CurrentDate, TimeSpan.FromDays(90), TimeSpan.FromDays(90));
        RecordsData = records.Where(x => x.StartTime > DateTime.Now && x.StartTime < DateTime.Now.AddDays(90)).ToList();
    }








    private void AddTag()
    {
        if (!string.IsNullOrEmpty(TagToAdd))
            ScheduledRecordValidation.YoutubeTags.Add(TagToAdd);
    }


    private async void OnNewEventAdd()
    {
        DateTime Date = this.ScheduleObj.SelectedDate;
        DateTime Today = DateTime.Now;
        var eventData = new ScheduledRecord
        {
            Id = Guid.NewGuid().ToString(),
            Title = "",
            StartTime = new DateTime(Date.Year, Date.Month, Date.Day, Today.Hour, 0, 0),
            EndTime = new DateTime(Date.Year, Date.Month, Date.Day, Today.Hour + 1, 0, 0),
            Description = ""

        };
        await ScheduleObj.OpenEditor(eventData, CurrentAction.Add);
    }

    private async void OnNewRecurringEventAdd()
    {
        DateTime Date = this.ScheduleObj.SelectedDate;
        DateTime Today = DateTime.Now;
        var eventData = new ScheduledRecord
        {
            Id = Guid.NewGuid().ToString(),
            Title = "",
            StartTime = new DateTime(Date.Year, Date.Month, Date.Day, Today.Hour, 0, 0),
            EndTime = new DateTime(Date.Year, Date.Month, Date.Day, Today.Hour + 1, 0, 0),
            Description = "",
            RecurrenceRule = "FREQ=DAILY;INTERVAL=1;"
        };
        await ScheduleObj.OpenEditor(eventData, CurrentAction.Add);
    }


    private void OnDayView()
    {
        this.CurrentView = this.ViewRef.Checked ? View.TimelineDay : View.Day;
    }
    private void OnWeekView()
    {
        this.CurrentView = this.ViewRef.Checked ? View.TimelineWeek : View.Week;
    }
    private void OnWorkWeekView()
    {
        this.CurrentView = this.ViewRef.Checked ? View.TimelineWorkWeek : View.WorkWeek;
    }
    private void OnMonthView()
    {
        this.CurrentView = this.ViewRef.Checked ? View.TimelineMonth : View.Month;
    }
    private void OnYearView()
    {
        this.CurrentView = this.ViewRef.Checked ? View.TimelineYear : View.Year;
    }


    private void OnViewChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        switch (this.CurrentView)
        {
            case View.Day:
            case View.TimelineDay:
                this.CurrentView = args.Checked ? View.TimelineDay : View.Day;
                break;
            case View.Week:
            case View.TimelineWeek:
                this.CurrentView = args.Checked ? View.TimelineWeek : View.Week;
                break;
            case View.WorkWeek:
            case View.TimelineWorkWeek:
                this.CurrentView = args.Checked ? View.TimelineWorkWeek : View.WorkWeek;
                break;
            case View.Month:
            case View.TimelineMonth:
                this.CurrentView = args.Checked ? View.TimelineMonth : View.Month;
                break;
            case View.Year:
            case View.TimelineYear:
                this.CurrentView = args.Checked ? View.TimelineYear : View.Year;
                break;
            case View.Agenda:
                this.CurrentView = View.Agenda;
                break;
        }
    }

    public void OnTimeScaleChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        this.EnableTimeScale = args.Checked;
    }
}
