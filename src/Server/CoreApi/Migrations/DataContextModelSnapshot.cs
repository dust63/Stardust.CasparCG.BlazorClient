// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Stardust.Flux.CoreApi.Models;

namespace Stardust.Flux.CoreApi.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Stardust.Flux.CoreApi.Models.Entity.OutputSlot", b =>
                {
                    b.Property<int>("SlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("AudioCodec")
                        .HasColumnType("text");

                    b.Property<string>("AudioEncodingOptions")
                        .HasColumnType("text");

                    b.Property<int>("Channel")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("EncodingOptions")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("ServerId")
                        .HasColumnType("integer");

                    b.Property<string>("SlotType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VideoCodec")
                        .HasColumnType("text");

                    b.Property<string>("VideoEncodingOptions")
                        .HasColumnType("text");

                    b.HasKey("SlotId");

                    b.HasIndex("ServerId");

                    b.ToTable("OutputSlot");

                    b.HasDiscriminator<string>("SlotType").HasValue("OutputSlot");
                });

            modelBuilder.Entity("Stardust.Flux.CoreApi.Models.Entity.Server", b =>
                {
                    b.Property<int>("ServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Hostname")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.HasKey("ServerId");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("Stardust.Flux.CoreApi.Models.Entity.LiveStreamSlot", b =>
                {
                    b.HasBaseType("Stardust.Flux.CoreApi.Models.Entity.OutputSlot");

                    b.Property<string>("DefaultUrl")
                        .HasColumnType("text");

                    b.Property<string>("OutputFormat")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("LiveStream");
                });

            modelBuilder.Entity("Stardust.Flux.CoreApi.Models.Entity.RecordSlot", b =>
                {
                    b.HasBaseType("Stardust.Flux.CoreApi.Models.Entity.OutputSlot");

                    b.Property<string>("RecordParameters")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Record");
                });

            modelBuilder.Entity("Stardust.Flux.CoreApi.Models.Entity.OutputSlot", b =>
                {
                    b.HasOne("Stardust.Flux.CoreApi.Models.Entity.Server", "Server")
                        .WithMany("Slots")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("Stardust.Flux.CoreApi.Models.Entity.Server", b =>
                {
                    b.Navigation("Slots");
                });
#pragma warning restore 612, 618
        }
    }
}
