// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Stardust.Flux.PublishApi.Models;

namespace Stardust.Flux.PublishApi.Migrations
{
    [DbContext(typeof(PublishContext))]
    [Migration("20210214170313_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Stardust.Flux.PublishApi.Models.YoutubeAccount", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("AccessToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("ExpiresInSeconds")
                        .HasColumnType("bigint");

                    b.Property<string>("IdToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("IssuedUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<string>("Scope")
                        .HasColumnType("text");

                    b.Property<string>("TokenType")
                        .HasColumnType("text");

                    b.HasKey("Key");

                    b.ToTable("YoutubeAccounts");
                });

            modelBuilder.Entity("Stardust.Flux.PublishApi.Models.YoutubeUpload", b =>
                {
                    b.Property<string>("YoutubeUploadId")
                        .HasColumnType("text");

                    b.Property<long>("BytesSent")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("VideoId")
                        .HasColumnType("text");

                    b.Property<string>("YoutubeAccountId")
                        .HasColumnType("text");

                    b.HasKey("YoutubeUploadId");

                    b.HasIndex("YoutubeAccountId");

                    b.ToTable("YoutubeUploads");
                });

            modelBuilder.Entity("Stardust.Flux.PublishApi.Models.YoutubeUpload", b =>
                {
                    b.HasOne("Stardust.Flux.PublishApi.Models.YoutubeAccount", "YoutubeAccount")
                        .WithMany("YoutubeUploads")
                        .HasForeignKey("YoutubeAccountId");

                    b.Navigation("YoutubeAccount");
                });

            modelBuilder.Entity("Stardust.Flux.PublishApi.Models.YoutubeAccount", b =>
                {
                    b.Navigation("YoutubeUploads");
                });
#pragma warning restore 612, 618
        }
    }
}
